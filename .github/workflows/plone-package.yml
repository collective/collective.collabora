# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Plone package

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    code_checks:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
              python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        steps:
            - name: Git checkout
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install tox tox-gh-actions

            - name: Black-Check
              run: |
                  tox -r -e black-check

            - name: Lint with tox
              run: |
                  tox -r -e py${{ matrix.python-version }}-lint
              env:
                PLATFORM: lint

    build_and_test:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
              python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
              plone-version: ['Plone52', 'Plone60', 'Plone61']
              # While tox skips invalid matrix combinations, Github actions does
              # schedule and fail jobs for these. So exclude them. We could also
              # use include instead, but then the job names do not contain the
              # Plone version.
              exclude:
                - python-version: '3.8'
                  plone-version: 'Plone60'
                - python-version: '3.8'
                  plone-version: 'Plone61'
                - python-version: '3.9'
                  plone-version: 'Plone52'
                - python-version: '3.9'
                  plone-version: 'Plone61'
                - python-version: '3.10'
                  plone-version: 'Plone52'
                - python-version: '3.11'
                  plone-version: 'Plone52'
                - python-version: '3.12'
                  plone-version: 'Plone52'
                - python-version: '3.13'
                  plone-version: 'Plone52'
                - python-version: '3.13'
                  plone-version: 'Plone60'

        steps:
            - name: Git checkout
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Cache hash ${{ matrix.python-version }} - ${{ matrix.plone-version }}
              uses: actions/cache@v4
              with:
                  path: |
                    ~/.cache/pip
                    ~/buildout-cache
                    ~/extends
                  key: ${{ runner.os }}-tox-${{ matrix.python-version }}-${{ matrix.plone-version }}-${{ hashFiles('**/setup.py') }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/*.cfg') }}-${{ hashFiles('**/constraints.txt') }}-${{ hashFiles('**/tox.ini') }}
                  #restore-keys: |
                  #  ${{ runner.os }}-tox-

            - name: Cache configure
              run: |
                  mkdir -p ~/buildout-cache/{eggs,downloads}
                  mkdir ~/.buildout
                  echo "[buildout]" > $HOME/.buildout/default.cfg
                  echo "download-cache = $HOME/buildout-cache/downloads" >> $HOME/.buildout/default.cfg
                  echo "eggs-directory = $HOME/buildout-cache/eggs" >> $HOME/.buildout/default.cfg

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install tox tox-gh-actions

            - name: Test with tox
              run: |
                  tox -r -e py${{ matrix.python-version }}-${{ matrix.plone-version }}
              env:
                PLONE_VERSION: ${{ matrix.plone-version }}

            # Coverage, based on https://hynek.me/articles/ditch-codecov-python/

            - name: Upload coverage data
              uses: actions/upload-artifact@v4
              with:
                name: coverage-data-${{ matrix.python-version }}-${{ matrix.plone-version }}
                path: .coverage.*
                include-hidden-files: true
                if-no-files-found: ignore

    coverage:
        name: Combine & check coverage
        if: always()
        needs: build_and_test
        runs-on: ubuntu-latest

        steps:
          - name: Git checkout
            uses: actions/checkout@v4

          - name: Setup Python 3.12
            uses: actions/setup-python@v5
            with:
              # Use latest Python, so it understands all syntax.
              python-version: "3.12"

          - name: Download coverage data
            uses: actions/download-artifact@v4
            with:
              pattern: coverage-data-*
              merge-multiple: true

          - name: Combine coverage & fail if it's <100%
            run: |
              python -Im pip install --upgrade coverage[toml]

              python -Im coverage combine
              python -Im coverage html --skip-covered --skip-empty

              # Report and write to summary.
              python -Im coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

              # export to env for badge
              export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
              echo "total=$TOTAL" >> $GITHUB_ENV

              # Report again and fail if under 100%.
              python -Im coverage report --fail-under=95

          - name: Upload HTML report if check failed
            uses: actions/upload-artifact@v4
            with:
              name: html-report
              path: htmlcov
            if: ${{ failure() }}

          - name: "Make badge"
            uses: schneegans/dynamic-badges-action@v1.4.0
            with:
              # COVERAGE_GIST_SECRET is a GitHub personal access token with scope "gist".
              auth: ${{ secrets.COVERAGE_GIST_SECRET }}
              gistID: 2a12a9fe2dbca0d4337ca96603bd58d7
              filename: covbadge.json
              label: Coverage
              message: ${{ env.total }}%
              minColorRange: 50
              maxColorRange: 90
              valColorRange: ${{ env.total }}
